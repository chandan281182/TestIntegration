{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Employee profile management",
    "description" : "## Overview of this API in detail \n\n Employee profile management api is designed for insert and fetch employee profile details\n\n Employee profile management api developed for onboarding new joiners can facilitate their integration into a system by providing a streamlined process and clear understanding with this example.\n\n Using this API, you **can** retrieve the following data;\n\n insert/fetch the employee profile information\n\nUsing this API, you **cannot**; - delete any of the employee details from systems\nWe have created 3 endpoints for this API - Following 3 endpoints will be consume from any app\n  - /profiles/{id}\n  - /profiles\n  - /profiles\n\n## Who can use this API\n\n  ###### [Describe who can use this API a brief of how the API works]\n\nThis API can only be used where there is a legal basis to fetch, create employee information.\nSpecifically, you will be;  - Part of an internal Jaguar Land Rover development team - Part of an external contracted development team known to Jaguar Land Rover\n## Security and authorization\n\n  ###### [Describe the Security and authorization plans]\n\nWe are using OAuth2 with basic authorization, you will need to be onboarded to receive credentials in order to use this API.ie \nOnce you have your credentials, you can read more about  [authentication for our API Platform](/docs/security/authentication).\nNote that currently, credentials differ across each environment. \n## Environments \n\n ###### [Describe the environments where this API will be hosted]\n\nBelow are the current environments available for using the employee profile management. \n\n  |Environment|URL|\n  |-----------|---|\n  |Staging|`https://api.staging.jlr-ddc.com/employee-profile-management/`|\n\n\n## Digital Onboarding\n\n ###### [Describe the digital onboarding process]\n\nTo provide a product or service on our platform, or use an existing API, you'll need to be approved. To be approved, you'll need to supply some key information. Please refer to our [onboarding information](/docs/getting-started/onboarding).\nPlatform API Team - [`apideveloper_smb@jaguarlandrover.com`](mailto:apideveloper_smb@jaguarlandrover.com)\nCopyright (c) Jaguar Land Rover Ltd 2025. All rights reserved\n\n ###### [Lists of rquest and response objects including HTTP status codes, descriptions, and example responses]\n\n ###### [Please note that the error responses must adopt these existing schema objects here - https://app.swaggerhub.com/domains/JaguarLandRover/Errors/1.0.2#/]\n \n",
    "contact" : {
      "name" : "API Platform Team, Manchester DDC, Jaguar Land Rover Ltd.",
      "url" : "https://api-docs.jlr-ddc.com",
      "email" : "apideveloper_smb@jaguarlandrover.com"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0"
    },
    "version" : "1.0.2"
  },
  "servers" : [ {
    "url" : "https://virtserver.swaggerhub.com/JaguarLandRover/EmployeeProfile-Template-For-Catalyst/1.0.0",
    "description" : "SwaggerHub API Auto Mocking"
  } ],
  "security" : [ {
    "bearerAuth" : [ ]
  } ],
  "tags" : [ {
    "name" : "employeeProfiles"
  } ],
  "paths" : {
    "/profiles" : {
      "get" : {
        "tags" : [ "employeeProfiles" ],
        "summary" : "Get a list of all the employee profiles",
        "description" : "This returns the details about all the available employee profiles",
        "operationId" : "getEmployeeProfiles",
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "It contains information about Authorization",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "autherization",
            "example" : "test"
          }
        }, {
          "name" : "Content-Type",
          "in" : "header",
          "description" : "It contains information about api version",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "major.minor.semantic",
            "example" : "1.0.0"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "It contains information about api version",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "major.minor.semantic",
            "example" : "1.0.0"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmployeeProfilesResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                },
                "example" : {
                  "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400",
                  "title" : "Bad Request",
                  "status" : 400,
                  "detail" : "The request was invalid",
                  "issues" : [ {
                    "fieldName" : "Id",
                    "error" : "The Brand with the Id does not exist"
                  } ]
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                },
                "example" : {
                  "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401",
                  "title" : "Unauthorized",
                  "status" : 401,
                  "detail" : "The request was Unauthorised",
                  "issues" : [ {
                    "error" : "The request was not authorised due to Invalid access token"
                  } ]
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                },
                "example" : {
                  "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403",
                  "title" : "Forbidden",
                  "status" : 403,
                  "detail" : "The request was forbidden",
                  "issues" : [ {
                    "error" : "The request was forbidden due to non success response code"
                  } ]
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                },
                "example" : {
                  "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404",
                  "title" : "Not Found",
                  "status" : 404,
                  "detail" : "Resource was not found",
                  "issues" : [ {
                    "error" : "The requested resource was not found."
                  } ]
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not Allowed",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                },
                "example" : {
                  "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/405",
                  "title" : "Method Not Allowed",
                  "status" : 405,
                  "detail" : "Method Not Allowed",
                  "issues" : [ {
                    "error" : "Method not allowed due to non success response code"
                  } ]
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                },
                "example" : {
                  "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500",
                  "title" : "Internal Server Error",
                  "status" : 500,
                  "detail" : "Internal Server Error",
                  "issues" : [ {
                    "error" : "Internal Server Error occurred"
                  } ]
                }
              }
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                },
                "example" : {
                  "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503",
                  "title" : "Service Unavailable",
                  "status" : 503,
                  "detail" : "Service Unavailable",
                  "issues" : [ {
                    "error" : "The service is temporarily unavailable"
                  } ]
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "employeeProfiles" ],
        "summary" : "This operation adds a new employee profile",
        "description" : "This api add a new employee profile with employee details.",
        "operationId" : "AddEmployeeProfile",
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "It contains information about Authorization",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "autherization",
            "example" : "test"
          }
        }, {
          "name" : "Content-Type",
          "in" : "header",
          "description" : "It contains information about api version",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "major.minor.semantic",
            "example" : "1.0.0"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "It contains information about api version",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "major.minor.semantic",
            "example" : "1.0.0"
          }
        } ],
        "requestBody" : {
          "description" : "The brand model details are to be posted to this endpoint",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmployeeProfileRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmployeeProfileResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                },
                "example" : {
                  "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400",
                  "title" : "Bad Request",
                  "status" : 400,
                  "detail" : "The request was invalid",
                  "issues" : [ {
                    "fieldName" : "Id",
                    "error" : "The Brand with the Id does not exist"
                  } ]
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                },
                "example" : {
                  "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401",
                  "title" : "Unauthorized",
                  "status" : 401,
                  "detail" : "The request was Unauthorised",
                  "issues" : [ {
                    "error" : "The request was not authorised due to Invalid access token"
                  } ]
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                },
                "example" : {
                  "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403",
                  "title" : "Forbidden",
                  "status" : 403,
                  "detail" : "The request was forbidden",
                  "issues" : [ {
                    "error" : "The request was forbidden due to non success response code"
                  } ]
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                },
                "example" : {
                  "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404",
                  "title" : "Not Found",
                  "status" : 404,
                  "detail" : "Resource was not found",
                  "issues" : [ {
                    "error" : "The requested resource was not found."
                  } ]
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not Allowed",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                },
                "example" : {
                  "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/405",
                  "title" : "Method Not Allowed",
                  "status" : 405,
                  "detail" : "Method Not Allowed",
                  "issues" : [ {
                    "error" : "Method not allowed due to non success response code"
                  } ]
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                },
                "example" : {
                  "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500",
                  "title" : "Internal Server Error",
                  "status" : 500,
                  "detail" : "Internal Server Error",
                  "issues" : [ {
                    "error" : "Internal Server Error occurred"
                  } ]
                }
              }
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                },
                "example" : {
                  "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503",
                  "title" : "Service Unavailable",
                  "status" : 503,
                  "detail" : "Service Unavailable",
                  "issues" : [ {
                    "error" : "The service is temporarily unavailable"
                  } ]
                }
              }
            }
          }
        }
      }
    },
    "/profiles/{id}" : {
      "get" : {
        "tags" : [ "employeeProfiles" ],
        "summary" : "Get a employee profile using the employee Id",
        "description" : "This api retrives a employee profile associated with a employee id.",
        "operationId" : "GetEmployeeProfileById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the employee",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "number"
          },
          "example" : 1
        }, {
          "name" : "Authorization",
          "in" : "header",
          "description" : "It contains information about Authorization",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "autherization",
            "example" : "test"
          }
        }, {
          "name" : "Content-Type",
          "in" : "header",
          "description" : "It contains information about api version",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "major.minor.semantic",
            "example" : "1.0.0"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "It contains information about api version",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "major.minor.semantic",
            "example" : "1.0.0"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmployeeProfileResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                },
                "example" : {
                  "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400",
                  "title" : "Bad Request",
                  "status" : 400,
                  "detail" : "The request was invalid",
                  "issues" : [ {
                    "fieldName" : "Id",
                    "error" : "The Brand with the Id does not exist"
                  } ]
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                },
                "example" : {
                  "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401",
                  "title" : "Unauthorized",
                  "status" : 401,
                  "detail" : "The request was Unauthorised",
                  "issues" : [ {
                    "error" : "The request was not authorised due to Invalid access token"
                  } ]
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                },
                "example" : {
                  "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403",
                  "title" : "Forbidden",
                  "status" : 403,
                  "detail" : "The request was forbidden",
                  "issues" : [ {
                    "error" : "The request was forbidden due to non success response code"
                  } ]
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                },
                "example" : {
                  "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404",
                  "title" : "Not Found",
                  "status" : 404,
                  "detail" : "Resource was not found",
                  "issues" : [ {
                    "error" : "The requested resource was not found."
                  } ]
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not Allowed",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                },
                "example" : {
                  "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/405",
                  "title" : "Method Not Allowed",
                  "status" : 405,
                  "detail" : "Method Not Allowed",
                  "issues" : [ {
                    "error" : "Method not allowed due to non success response code"
                  } ]
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                },
                "example" : {
                  "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500",
                  "title" : "Internal Server Error",
                  "status" : 500,
                  "detail" : "Internal Server Error",
                  "issues" : [ {
                    "error" : "Internal Server Error occurred"
                  } ]
                }
              }
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                },
                "example" : {
                  "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503",
                  "title" : "Service Unavailable",
                  "status" : 503,
                  "detail" : "Service Unavailable",
                  "issues" : [ {
                    "error" : "The service is temporarily unavailable"
                  } ]
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "EmployeeProfilesResponse" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EmployeeProfile"
            }
          },
          "status" : {
            "type" : "number",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "OK"
          },
          "requestId" : {
            "type" : "string",
            "example" : "105445aa7843bc8bf206b12000100000"
          },
          "timeGenerated" : {
            "type" : "string",
            "example" : "2023-12-01T14:34:58+00:00"
          }
        }
      },
      "EmployeeProfileRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "email id of the employee",
            "example" : "vvanjara@partner.jaguarlandrover.com"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the employee",
            "example" : "Vasantharao"
          },
          "gender" : {
            "type" : "string",
            "description" : "The gender of the employee",
            "example" : "Male"
          },
          "address" : {
            "type" : "string",
            "description" : "Address of the employee",
            "example" : "Flat no 301, My Apartment, Road 3"
          },
          "mobileNo" : {
            "type" : "number",
            "description" : "Mobile no of the employee",
            "example" : 9739123456
          }
        }
      },
      "EmployeeProfileResponse" : {
        "properties" : {
          "result" : {
            "$ref" : "#/components/schemas/EmployeeProfile"
          },
          "status" : {
            "type" : "number",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "example" : "OK"
          },
          "requestId" : {
            "type" : "string",
            "example" : "105445aa7843bc8bf206b12000100000"
          },
          "timeGenerated" : {
            "type" : "string",
            "example" : "2023-12-01T14:34:58+00:00"
          }
        }
      },
      "EmployeeProfile" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number",
            "description" : "The unique identifier for the employee",
            "example" : 1
          },
          "email" : {
            "type" : "string",
            "description" : "email id of the employee",
            "example" : "vvanjara@partner.jaguarlandrover.com"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the employee",
            "example" : "Vasantharao"
          },
          "gender" : {
            "type" : "string",
            "description" : "The gender of the employee",
            "example" : "Male"
          },
          "address" : {
            "type" : "string",
            "description" : "Address of the employee",
            "example" : "Flat no 301, My Apartment, Road 3"
          },
          "mobileNo" : {
            "type" : "number",
            "description" : "Mobile no of the employee",
            "example" : 9739123456
          }
        }
      },
      "ProblemDetails" : {
        "required" : [ "status", "title", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "A fully qualified URI reference that identifies the problem type.\nThe URI should provide human-readable documentation for the problem type.\n",
            "format" : "uri",
            "example" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400"
          },
          "title" : {
            "type" : "string",
            "description" : "A short, human-readable summary of the problem type. \nIt SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.\n",
            "example" : "Bad Request"
          },
          "status" : {
            "type" : "integer",
            "description" : "The HTTP status code generated by the origin server for this occurrence of the problem\n",
            "format" : "int32",
            "example" : 400
          },
          "detail" : {
            "type" : "string",
            "description" : "A human-readable explanation specific to this occurrence of the problem",
            "example" : "The request is invalid."
          },
          "issues" : {
            "type" : "array",
            "description" : "A list of issues that exist with the request. Note this is an extension that is supported by the RFC but specific to Advanced.",
            "example" : [ {
              "fieldName" : "VIN",
              "error" : "The Vehicle Identification Number was not recognized as being in the correct format."
            } ],
            "items" : {
              "$ref" : "#/components/schemas/ProblemDetails_issues"
            }
          },
          "instance" : {
            "type" : "string",
            "description" : "A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced",
            "example" : "/house-of-brands/jag"
          }
        },
        "additionalProperties" : false,
        "description" : "The canonical model for problem details as a JSON object defined by [RFC7807](https://tools.ietf.org/html/rfc7807).\nWhen serialized as a JSON object, that format is identified with an \"application/problem+json\" media type. \nProblem type definitions may extend the problem details object with additional members.\n"
      },
      "ProblemDetails_issues" : {
        "type" : "object",
        "properties" : {
          "fieldName" : {
            "type" : "string",
            "example" : "The fieldname is invalid."
          },
          "error" : {
            "type" : "string",
            "example" : "This is an error."
          }
        }
      }
    },
    "responses" : {
      "400BadRequestResponse" : {
        "description" : "Bad Request",
        "content" : {
          "application/problem+json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ProblemDetails"
            },
            "example" : {
              "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400",
              "title" : "Bad Request",
              "status" : 400,
              "detail" : "The request was invalid",
              "issues" : [ {
                "fieldName" : "Id",
                "error" : "The Brand with the Id does not exist"
              } ]
            }
          }
        }
      },
      "401UnauthorizedResponse" : {
        "description" : "Unauthorized",
        "content" : {
          "application/problem+json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ProblemDetails"
            },
            "example" : {
              "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401",
              "title" : "Unauthorized",
              "status" : 401,
              "detail" : "The request was Unauthorised",
              "issues" : [ {
                "error" : "The request was not authorised due to Invalid access token"
              } ]
            }
          }
        }
      },
      "403ForbiddenResponse" : {
        "description" : "Forbidden",
        "content" : {
          "application/problem+json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ProblemDetails"
            },
            "example" : {
              "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403",
              "title" : "Forbidden",
              "status" : 403,
              "detail" : "The request was forbidden",
              "issues" : [ {
                "error" : "The request was forbidden due to non success response code"
              } ]
            }
          }
        }
      },
      "404NotFoundResponse" : {
        "description" : "Not Found",
        "content" : {
          "application/problem+json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ProblemDetails"
            },
            "example" : {
              "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404",
              "title" : "Not Found",
              "status" : 404,
              "detail" : "Resource was not found",
              "issues" : [ {
                "error" : "The requested resource was not found."
              } ]
            }
          }
        }
      },
      "405MethodNotAllowedResponse" : {
        "description" : "Method Not Allowed",
        "content" : {
          "application/problem+json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ProblemDetails"
            },
            "example" : {
              "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/405",
              "title" : "Method Not Allowed",
              "status" : 405,
              "detail" : "Method Not Allowed",
              "issues" : [ {
                "error" : "Method not allowed due to non success response code"
              } ]
            }
          }
        }
      },
      "500InternalServerErrorResponse" : {
        "description" : "Internal Server Error",
        "content" : {
          "application/problem+json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ProblemDetails"
            },
            "example" : {
              "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500",
              "title" : "Internal Server Error",
              "status" : 500,
              "detail" : "Internal Server Error",
              "issues" : [ {
                "error" : "Internal Server Error occurred"
              } ]
            }
          }
        }
      },
      "503ServiceUnavailableResponse" : {
        "description" : "Service Unavailable",
        "content" : {
          "application/problem+json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ProblemDetails"
            },
            "example" : {
              "type" : "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503",
              "title" : "Service Unavailable",
              "status" : 503,
              "detail" : "Service Unavailable",
              "issues" : [ {
                "error" : "The service is temporarily unavailable"
              } ]
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "bearerAuth" : {
        "type" : "http",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      }
    }
  }
}